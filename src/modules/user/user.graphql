directive @isAuthenticated on FIELD | FIELD_DEFINITION
directive @hasRole(code: String) on FIELD | FIELD_DEFINITION

type Role {
  _id: ID!
  code: String!
  name: String!
}
type User {
  _id: ID!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  address: String!
  isActive: Boolean!
  isLock: Boolean!
  role: Role!
  urlImg: String
  birthDay: String
  gender: String
}

input UserInput {
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  address: String!
}
type LoginResponse {
  token: String!
}
input LoginUserInput {
	username: String!
	password: String!
}
type Query {
  hello: String! @isAuthenticated
  users: [User!]! @isAuthenticated 
  customers: [User!]! @isAuthenticated 
  employees: [User!]! @isAuthenticated 
  user(_id: String!): User!
  me: User @isAuthenticated
}
input UpdateUserInput {
  phone: String!
  address: String!
  birthDay: String!
  gender: String!
}
type Mutation {
  createUser(input: UserInput!): User!
  updateUser(_id: String!, input: UpdateUserInput!): Boolean! @isAuthenticated
  deleteUser(_id: String!): Boolean! @hasRole(code: "ADMIN")
  deleteAll: Boolean! @hasRole(code: "ADMIN")
  login(input: LoginUserInput!): LoginResponse! 
  updatePasword(_id: String!, oldPass: String!, newPass: String!): Boolean! @isAuthenticated
  lockUSer(_id: String!): Boolean! @hasRole(code: "ADMIN")
  lockUSerAcc(_id: String!): Boolean! @hasRole(code: "EMPLOYEE")
  setRole(_id: String!, code: String!): Boolean! @hasRole(code: "ADMIN")
  updateUrlImg(_id: String!, urlImg: String!): Boolean! @isAuthenticated
}